name: Release

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  packages: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      agent--tag_name: ${{ steps.release.outputs.agent--tag_name}}
      agent--release_created: ${{ steps.release.outputs.agent--release_created}}
      agent--major_version: ${{ steps.release.outputs.agent--major}}
      agent--minor_version: ${{ steps.release.outputs.agent--minor}}
      agent--patch_version: ${{ steps.release.outputs.agent--patch}}
      agent--sha: ${{ steps.release.outputs.agent--sha}}
      server--tag_name: ${{ steps.release.outputs.server--tag_name}}
      server--release_created: ${{ steps.release.outputs.server--release_created}}
      server--major_version: ${{ steps.release.outputs.server--major}}
      server--minor_version: ${{ steps.release.outputs.server--minor}}
      server--patch_version: ${{ steps.release.outputs.server--patch}}
      server--sha: ${{ steps.release.outputs.server--sha}}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
      - name: Print release outputs for debugging
        continue-on-error: true
        run: |
          echo "Release outputs:"
          echo "${{ toJson(steps.release.outputs) }}"


  release-agent:
    if: ${{needs.release-please.outputs.agent--release_created}}
    runs-on: ubuntu-latest
    needs: release-please
    strategy:
      fail-fast: false
      matrix:
        target:
          - linux-x64
          - linux-arm64
          - windows-x64
          - darwin-x64
          - darwin-arm64
          - linux-x64-musl
          - linux-arm64-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: tool-versions
        name: Get Tool Versions
        run: |
          for tool in $(cat .tool-versions | awk '{print $1}'); do
            echo "$tool=$(grep "$tool" .tool-versions | awk '{print $2}')" >> $GITHUB_OUTPUT
          done
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.tool-versions.outputs.bun }}
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/bun.lock') }}
      - name: Bun Install
        run: bun install --frozen-lockfile
      - name: Build Agent
        working-directory: agent
        run: bun build --compile --target bun-${{ matrix.target }}  --minify --sourcemap --bytecode ./index.ts --outfile devicemonster-agent-${{ matrix.target }}
      - name: Upload Release Artifact
        working-directory: agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.release-please.outputs.agent--tag_name }} devicemonster-agent-${{ matrix.target }}*

  release-server:
    if: ${{needs.release-please.outputs.server--release_created}}
    runs-on: ubuntu-latest
    needs: release-please
    strategy:
      fail-fast: false
      matrix:
        target:
          - linux-x64
          - linux-arm64
          - windows-x64
          - darwin-x64
          - darwin-arm64
          - linux-x64-musl
          - linux-arm64-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: tool-versions
        name: Get Tool Versions
        run: |
          for tool in $(cat .tool-versions | awk '{print $1}'); do
            echo "$tool=$(grep "$tool" .tool-versions | awk '{print $2}')" >> $GITHUB_OUTPUT
          done
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.tool-versions.outputs.bun }}
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/bun.lock') }}
      - name: Bun Install
        run: bun install --frozen-lockfile
      # Asset compilation is broken until this is fixed:
      # https://github.com/oven-sh/bun/issues/11895
      - name: Build Server
        working-directory: server
        run: bun build --compile --target bun-${{ matrix.target }}  --minify --sourcemap --bytecode ./src/index.tsx --outfile devicemonster-server-${{ matrix.target }}
      - name: Upload Release Artifact
        working-directory: server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.release-please.outputs.server--tag_name }} devicemonster-server-${{ matrix.target }}*

  release-server-docker:
    if: ${{needs.release-please.outputs.server--release_created}}
    runs-on: ubuntu-latest
    needs: release-please
    environment: Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: tool-versions
        name: Get Tool Versions
        run: |
          for tool in $(cat .tool-versions | awk '{print $1}'); do
            echo "$tool=$(grep "$tool" .tool-versions | awk '{print $2}')" >> $GITHUB_OUTPUT
          done
      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: tiltcampbot
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate tags
        id: docker_tags
        uses: docker/metadata-action@v5
        with:
          images: |
            tiltcamp/devicemonster
            ghcr.io/tiltcamp/devicemonster
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: server/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUN_VERSION=${{ steps.tool-versions.outputs.bun }}
          push: true
          tags: |
            tiltcamp/devicemonster:latest
            tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}.${{ needs.release-please.outputs.server--minor_version }}.${{ needs.release-please.outputs.server--patch_version }}
            tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}.${ needs.release-please.outputs.server--minor_version }}
            tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}
            tiltcamp/devicemonster:${{ needs.release-please.outputs.server--sha }}
            ghcr.io/tiltcamp/devicemonster:latest
            ghcr.io/tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}.${{ needs.release-please.outputs.server--minor_version }}.${{ needs.release-please.outputs.server--patch_version }}
            ghcr.io/tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}.${ needs.release-please.outputs.server--minor_version }}
            ghcr.io/tiltcamp/devicemonster:${{ needs.release-please.outputs.server--major_version }}
          labels: |

          platforms: |
            linux/amd64
            linux/arm64
